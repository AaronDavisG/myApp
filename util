#!/usr/bin/env node

function dataPrompt(data, callback){

	var index = 0;
	var keys = Object.keys(data);
	var size = keys.length;

	if ( size > 0 ){

		var key = keys[index];
		var value = data[key];

		console.log('input ' + keys[index] );
		console.log('  defaultValue: ' + data[key]);
		
		process.stdin.resume();

		process.stdin.setEncoding('utf8');

		process.stdin.on('data', function (text) {

			if (text.length > 1){

				text = text.slice(0, text.length - 1);

				if (Number.isInteger(text)){

					data[key] = parseInt(text, 10);

				}else if( !isNaN(parseFloat(text)) ){

					data[key] = parseFloat(text);
				}else{
					data[key] = text;
				}
			}
			index++;

			if (index == size){
			//	process.stdin.resume();
				callback(null, data);
			}else{
				key = keys[index];
				value = data[key];

				console.log('input ' + keys[index]);
				console.log('  defaultValue: ' + data[key]);
			}
		});
	}
}

function deleteFolder(fs, path){

	if( fs.existsSync(path) ) {
	
		fs.readdirSync(path).forEach(function(file,index){
	
			var curPath = path + "/" + file;

			if(fs.lstatSync(curPath).isDirectory()) {
				
				deleteFolder(fs, curPath);
			} else {
				fs.unlinkSync(curPath);
			}
		});
		fs.rmdirSync(path);
	}
}

function write(fs, path, content, callback){

	fs.writeFile(path, content, function(error) {
		
		if (error) {
			
			console.log('util write error:  ' + error.message); 
		} else {
			console.log('util write success');
		}
		callback(error);
	});
}

function writeExports(fs, path, exportObject, callback){

	write(fs, 
		path,
		'module.exports = ' + JSON.stringify(exportObject, null, 2) + ';\n',
		callback);
}

function cloneRepo(exec, systemAction, dirName, repoName, repoURL, repoEXT, callback){

	exec(config.systemAction
		+ ' git cloneRepo '
		+ systemAction + ' '
		+ repoName + ' '
		+ repoURL + ' '
		+ config.repoEXT,
		function (error, stdout, stderr) {

			console.log(stdout);

			if (error) {
				
				console.log('util cloneRepo error: ' + error);
			} else {
				console.log('util cloneRepo success');
			}
			callback(error);
		}
	);
}

function npmInstall(exec, path, callback){

	exec('cd ' + path + ' && npm install',

		function (error, stdout, stderr) {

		console.log(stdout);

		if (error) {
			console.log('util npm install error: ' + error);
		} else {
			console.log('util npm install success');
		}
		callback(error);
	});
}

function setPermission(exec, path, owner, group, access, callback){

	exec('chown -R ' + owner + ':' + group + ' ' + path +
		' && chmod -R ' + access + ' ' + path,
		function (error, stdout, stderr) {

			if(error){
				console.log('util setPermission error: ' + error);
			}
			callback(error);
		}
	);
}

function systemServiceCall(exec, serviceName, serviceCall, callback){

	exec('systemctl ' + serviceCall + ' ' + serviceName + '.service',
		function (error, stdout, stderr) {

			if(stdout){
				console.log(stdout);
			}
			if (error) {
				console.log('util ' + serviceName + ' ' + serviceCall +' failure: ' + error);
			} else {
				console.log('util ' + serviceName + ' ' + serviceCall +' success');
			}
			callback(error);
		}
	);
}

function systemServiceReload(exec, callback){

	exec('systemctl daemon-reload',
		function (error, stdout, stderr) {

			if(stdout){
				console.log(stdout);
			}
			if (error) {
				console.log('util systemServiceReload failure: ' + error);
			} else {
				console.log('util systemServiceReload success');
			}
			callback(error);
		}
	);
}

module.exports.dataPrompt = dataPrompt;
module.exports.deleteFolder = deleteFolder;
module.exports.write = write;
module.exports.writeExports = writeExports;
module.exports.cloneRepo = cloneRepo;
module.exports.npmInstall = npmInstall;
module.exports.setPermission = setPermission;
module.exports.systemServiceCall = systemServiceCall;
module.exports.systemServiceReload = systemServiceReload;







